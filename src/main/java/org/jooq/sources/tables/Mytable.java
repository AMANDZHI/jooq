/*
 * This file is generated by jOOQ.
 */
package org.jooq.sources.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.sources.Public;
import org.jooq.sources.tables.records.MytableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mytable extends TableImpl<MytableRecord> {

    private static final long serialVersionUID = -1163361808;

    /**
     * The reference instance of <code>public.mytable</code>
     */
    public static final Mytable MYTABLE = new Mytable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MytableRecord> getRecordType() {
        return MytableRecord.class;
    }

    /**
     * The column <code>public.mytable.id</code>.
     */
    public final TableField<MytableRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mytable.name</code>.
     */
    public final TableField<MytableRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.mytable</code> table reference
     */
    public Mytable() {
        this(DSL.name("mytable"), null);
    }

    /**
     * Create an aliased <code>public.mytable</code> table reference
     */
    public Mytable(String alias) {
        this(DSL.name(alias), MYTABLE);
    }

    /**
     * Create an aliased <code>public.mytable</code> table reference
     */
    public Mytable(Name alias) {
        this(alias, MYTABLE);
    }

    private Mytable(Name alias, Table<MytableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mytable(Name alias, Table<MytableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Mytable(Table<O> child, ForeignKey<O, MytableRecord> key) {
        super(child, key, MYTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mytable as(String alias) {
        return new Mytable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mytable as(Name alias) {
        return new Mytable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mytable rename(String name) {
        return new Mytable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mytable rename(Name name) {
        return new Mytable(name, null);
    }
}
